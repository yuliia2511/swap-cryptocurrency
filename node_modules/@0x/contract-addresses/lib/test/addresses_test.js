"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai = __importStar(require("chai"));
require("mocha");
const src_1 = require("../src");
const ethereumjs_util_1 = require("ethereumjs-util");
const expect = chai.expect;
function toDeployedAddress(deployerAddress, nonce) {
    return (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.rlphash)([deployerAddress, nonce]).slice(12));
}
function isValidDeployedAddress(deployerAddress, deployedAddress) {
    for (let i = 0; i < 256; i++) {
        const address = toDeployedAddress(deployerAddress, i);
        if (address.toLowerCase() === deployedAddress.toLowerCase()) {
            return true;
        }
    }
    return false;
}
describe('addresses.json sanity test', () => {
    const allChainIds = Object.values(src_1.ChainId).filter(chainId => !isNaN(Number(chainId)));
    allChainIds.forEach(chainId => {
        describe(`addresses of chain id ${chainId}`, () => {
            const contractAddresses = (0, src_1.getContractAddressesForChainOrThrow)(chainId);
            it('all addresses are lowercased', () => __awaiter(void 0, void 0, void 0, function* () {
                const addresses = [
                    contractAddresses.zrxToken,
                    contractAddresses.etherToken,
                    contractAddresses.zeroExGovernor,
                    contractAddresses.zrxVault,
                    contractAddresses.staking,
                    contractAddresses.erc20BridgeProxy,
                    contractAddresses.erc20BridgeSampler,
                    contractAddresses.exchangeProxyGovernor,
                    contractAddresses.exchangeProxy,
                    contractAddresses.exchangeProxyTransformerDeployer,
                    contractAddresses.exchangeProxyFlashWallet,
                    contractAddresses.exchangeProxyLiquidityProviderSandbox,
                    contractAddresses.zrxTreasury,
                    contractAddresses.transformers.wethTransformer,
                    contractAddresses.transformers.payTakerTransformer,
                    contractAddresses.transformers.fillQuoteTransformer,
                    contractAddresses.transformers.affiliateFeeTransformer,
                    contractAddresses.transformers.positiveSlippageFeeTransformer,
                ];
                addresses.forEach(address => {
                    expect(address).to.eq(address.toLowerCase());
                });
            }));
            it('all transformer addresses are valid', () => __awaiter(void 0, void 0, void 0, function* () {
                const transformerAddresses = [
                    contractAddresses.transformers.wethTransformer,
                    contractAddresses.transformers.payTakerTransformer,
                    contractAddresses.transformers.fillQuoteTransformer,
                    contractAddresses.transformers.affiliateFeeTransformer,
                    contractAddresses.transformers.positiveSlippageFeeTransformer,
                ].filter(address => address !== '0x0000000000000000000000000000000000000000');
                transformerAddresses.forEach(transformerAddress => {
                    expect(isValidDeployedAddress(contractAddresses.exchangeProxyTransformerDeployer, transformerAddress)).to.true;
                });
            }));
        });
    });
});
//# sourceMappingURL=addresses_test.js.map